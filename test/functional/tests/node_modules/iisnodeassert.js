var http = require("http");
var assert = require("assert");

exports.sequence = function (tests) {
    if (typeof(tests) !== "object" || typeof(tests.length) !== "number") {
        throw "sequence function requires an array of tests as a parameter";
    }

    var current = 0;
    var next = function() {
        if (tests.length > current++) {
            tests[current - 1](next);
        }
    }

    next();
}

function request(timeout, path, body, verb, expectedStatusCode, expectedBody)
{
    return function(next) {
        var options = {
            host: process.env.IISNODETEST_HOST || "localhost",
            port: process.env.IISNODETEST_PORT || 31415,
            method: verb,
            path: path,
        };

        if (body)
            options.headers = { "Content-Length": body.length };

        console.log("request options: " + JSON.stringify(options));

        var request = null;

        var timerId = setTimeout(function() {
            request.abort();
            assert.ok(false, "request timed out");
        }, timeout);

        request = http.request(options, function(res) {
            console.log("response status: " + res.statusCode);
            console.log("response headers: " + JSON.stringify(res.headers));

            if (expectedStatusCode && res.statusCode !== expectedStatusCode)
                clearTimeout(timerId);

            if (expectedStatusCode)
                try {
                    assert.equal(res.statusCode, expectedStatusCode, "response status code matches the expected response status code");
                } catch (e) {
                    console.error(e);
                    process.exit();
                }
            
            res.setEncoding("utf8");
            var body = "";
            res.on("data", function(chunk) {
                console.log("response body chunk: " + chunk);
                body += chunk;
            });
            res.on("end", function() {
                console.log("end of response");
                clearTimeout(timerId);
                if (expectedBody)
                    try {
                        assert.equal(body, expectedBody, "response body matches the expected response body");
                    } catch (e) {
                        console.error(e);
                        process.exit();
                    }

                if (next) 
                    next();
            });
        });

        request.on("error", function (e) {
            console.log("problem with request: " + e.message);        
            clearTimeout(timerId);
            assert.ok(false, "response finished successfully");
        });

        if (body)
            request.write(body);

        request.end();
    }
}

exports.post = function (timeout, path, body, expectedStatusCode, expectedBody) {
    return request(timeout, path, body, "POST", expectedStatusCode, expectedBody);
}

exports.get = function (timeout, path, expectedStatusCode, expectedBody) {
    return request(timeout, path, null, "GET", expectedStatusCode, expectedBody);
}

exports.wait = function (timeout) {
    return function(next) {
        console.log("starting wait for " + timeout + " milliseconds...");
        setTimeout(function() { console.log("wait finished."); next(); }, timeout);
    }
}