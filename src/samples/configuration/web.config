<configuration>
  <system.webServer>

    <!-- indicates that the hello.js file is a node.js application 
    to be handled by the iisnode module -->

    <handlers>
      <add name="iisnode" path="hello.js" verb="*" modules="iisnode" />
    </handlers>

    <!-- 
      the iisnode section configures the behavior of the node.js IIS module 
      setting values below are defaults

    * node_env - determines the environment (production, development, staging, ...) in which iisnode 
      and child node processes run; if nonempty, is propagated to the child node processes as their NODE_ENV
      environment variable; if set to 'development' or not set at all, enables the debuggingEnabled and
      loggingEnabled settings to control whether debugging and logging is activated; all other values 
      disable debugging and logging; the default is the value of the IIS worker process'es NODE_ENV
      environment variable

    * nodeProcessCommandLine - command line starting the node executable; in shared
      hosting environments this setting would typically be locked at the machine scope.
      
    * maxProcessCountPerApplication - maximum number of node processes that IIS will start
      per application to accomodate incresing request load
      
    * maxConcurrentRequestsPerProcess - maximum number of reqeusts one node process can 
      handle at a time; if a request arrives while all existing node processes have reached their 
      limit, a new node process is created to handle it (up to the limit of maxProcessCountPerApplication)
      
    * maxPendingRequestsPerApplication - maximum number of requests per application queued up to be dispatched 
      for processing by a specific node process; this is meant to accomodate temporary spikes in traffic
      without rejecting the requests
      
    * maxNamedPipeConnectionRetry - number of times IIS will retry to establish a named pipe connection with a
      node process in order to send a new HTTP request
      
    * namedPipeConnectionRetryDelay - delay in milliseconds between connection retries
    
    * asyncCompletionThreadCount - size of the IO thread pool maintained by the IIS module to process asynchronous IO
    
    * initialRequestBufferSize - initial size in bytes of a memory buffer allocated for a new HTTP request
    
    * maxRequestBufferSize - maximum size in bytes of a memory buffer allocated per request; this is a hard limit of 
      the serialized form of HTTP request or response headers block
      
    * uncFileChangesPollingInterval - applications are recycled when the underlying *.js file is modified; if the file resides
      on a UNC share, the only reliable way to detect such modifications is to periodically poll for them; this setting 
      controls the polling interval
      
    * gracefulShutdownTimeout - when a node.js file is modified, all node processes handling running this application are recycled;
      this setting controls the time (in milliseconds) given for currently active requests to gracefully finish before the 
      process is terminated; during this time, all new requests are already dispatched to a new node process based on the fresh version 
      of the application
    
    * loggingEnabled - controls whether stdout and stderr streams from node processes are captured and made available over HTTP; this
      setting is subordinate to node_env setting
    
    * logDirectoryNameSuffix - suffix of the directory name that will store files with stdout and stderr captures; directly name is created
      by appending this suffix to the file name of the node.js application; individual log files are stored in that directory, one per node 
      process (in files of the form x.txt, where x is between 0 and maxProcessCountPerApplication - 1); given a node.js application at
      http://localhost/node/hello.js, log files would by default be stored at http://localhost/node/hello.js.logs/0.txt (thrugh 3.txt); 
      SECURITY NOTE: if log files contain sensitive information, this setting should be modified to contain enough entropy to be considered
      cryptographically secure; in most situations, a GUID is sufficient
      
    * debuggingEnabled - controls whether the built-in debugger is available; this setting is subordinate to node_env setting
      
    * debuggerPortRange - range of TCP ports that can be used for communication between the node-inspector debugger and the debugee; iisnode
      will round robin through this port range for subsequent debugging sessions and pick the next available (free) port to use from the range
      
    * debuggerPathSegment - URL path segment used to access the built-in node-inspector debugger; given a node.js application at 
      http://foo.com/bar/baz.js, the debugger can be accessed at http://foo.com/bar/baz.js/{debuggerPathSegment}, by default
      http://foo.com/bar/baz.js/debug
    
    * maxLogFileSizeInKB - maximum size of a log file in KB; once a log file exceeds this limit it is truncated back to empty
    
    * appendToExistingLog - determines whether pre-existing log files are appended to or created fresh when a node process with a given ordinal
      number starts; appending may be useful to diagnose unorderly node process terminations or recycling
      
    * logFileFlushInterval - interval in milliseconds for flushing logs to the log files
      
    -->
    
    <iisnode      
      node_env="%node_env%"
      maxProcessCountPerApplication="4"
      maxConcurrentRequestsPerProcess="1024"
      maxPendingRequestsPerApplication="1024"
      maxNamedPipeConnectionRetry="3"
      namedPipeConnectionRetryDelay="2000"      
      asyncCompletionThreadCount="4"
      initialRequestBufferSize="4096"
      maxRequestBufferSize="65536"
      uncFileChangesPollingInterval="5000"
      gracefulShutdownTimeout="60000"
      loggingEnabled="true"
      logDirectoryNameSuffix="logs"
      debuggingEnabled="true"
      debuggerPortRange="5058-6058"
      debuggerPathSegment="debug"
      maxLogFileSizeInKB="128"
      appendToExistingLog="false"
      logFileFlushInterval="5000"
     />

    <!--     
    
    One more setting that can be modified is the path to the node.exe executable:
    
    <iisnode
      nodeProcessCommandLine="&quot;%programfiles%\nodejs\node.exe&quot;" />
    
    -->

  </system.webServer>
</configuration>